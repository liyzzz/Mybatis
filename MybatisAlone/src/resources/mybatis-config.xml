<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
       configuration中标签必须按照
       properties,settings,typeAliases,typeHandlers,objectFactory,
       objectWrapperFactory,reflectorFactory,plugins,environments,databaseIdProvider,mappers
       这个顺序排序
    -->
    <properties resource="db.properties"></properties>
    <settings>
        <!-- 打印查询语句 -->
        <setting name="logImpl" value="STDOUT_LOGGING" />

        <!--
            控制全局缓存（二级缓存）
            value="false" 关闭二级缓存
            value="true" 默认值 开启二级缓存
        -->
        <setting name="cacheEnabled" value="true"/>

        <!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。默认 false  -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 当开启时，任何方法的调用都会加载该对象的所有属性。默认 false，可通过select标签的 fetchType来覆盖-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--  Mybatis 创建具有延迟加载能力的对象所用到的代理工具，默认JAVASSIST -->
        <!--<setting name="proxyFactory" value="CGLIB" />-->
        <!--
            value="SESSION"
            会话级别的一级缓存，也是默认值
            value="STATEMENT"
            关闭一级缓存,每次执行完一个STATEMENT后都会将一级缓存清除。
            只是需要对某一条select语句禁用一级缓存，则可以在对应的select元素上加上flushCache="true" 默认select语句为false
         -->
        <setting name="localCacheScope" value="SESSION"/>
    </settings>


<!--    typeAliases标签用来起别名-->
    <typeAliases>
        <typeAlias alias="blog" type="com.liyueze.mybatis.entry.Blog" />
    </typeAliases>

    <!--注册自定义TypeHandler-->
     <typeHandlers>
            <typeHandler handler="com.liyueze.mybatis.typeHandler.MyTypeHandler"></typeHandler>
     </typeHandlers>

    <!-- 对象工厂 -->
    <objectFactory type="com.liyueze.mybatis.objectFacoty.MyObjectFacoty">
        <property name="ObjectFacoty" value="com.liyueze.mybatis.entry.Blog"/>
    </objectFactory>

    <!--插件-->
    <plugins>
        <!-- 分页pageHelp插件-->
        <!--配置说明见https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md-->
        <plugin interceptor="com.github.pagehelper.PageHelper">
            <property name="dialect" value="mysql"/>
            <property name="offsetAsPageNum" value="false"/>
            <property name="rowBoundsWithCount" value="false"/>
            <property name="pageSizeZero" value="true"/>
            <property name="reasonable" value="false"/>
            <property name="supportMethodsArguments" value="false"/>
            <property name="returnPageInfo" value="none"/>
        </plugin>
    </plugins>

    <!--可以在new SqlSessionFactoryBuilder().build(reader, environment)这个提供的构造方法中传入需要的environment-->
    <environments default="development">
        <!--假设为开发环境-->
        <environment id="development">
            <!--
            transactionManager只有两个值，
            一个是JDBC:使用JDBC的事物管理,使用Connection对象的commit()、rollback()、close()来管理事务。
            一个是MANAGED:没有事务,交给容器来管理，例如JBOSS，Weblogic
            如 果 是 Spring + MyBatis ，则没有必要配置 ，因为会直接在applicationContext.xml里面配置数据源，覆盖MyBatis的配置
            -->
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <!--假设为测试环境-->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.test.driver}"/>
                <property name="url" value="${jdbc.test.url}"/>
                <property name="username" value="${jdbc.test.username}"/>
                <property name="password" value="${jdbc.test.password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="mapper/BlogMapper.xml"/>
        <mapper resource="mapper/BlogMapperExt.xml"/>
    </mappers>

</configuration>